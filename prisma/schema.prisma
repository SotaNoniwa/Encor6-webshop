datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  role           Role      @default(USER)
  accounts       Account[]
  // orders         Order[]
}

// Product is for one color not for one product
// product having the same name with different color have different ids
model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  category    String
  inStock     Boolean
  image       Image

  // orders Order[]
}

// This model deal with user's order (currently no implementation but in the future)
// model Order {
//   id          String @id @default(auto()) @map("_id") @db.ObjectId
//   userId      String @db.ObjectId
//   productId   String @db.ObjectId
//   name        String
//   description String
//   price       Float
//   category    String
//   image       Image
//   quantity    Int    @default(0)

//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
// }

type Image {
  color     String
  colorCode String
  imageUrl  String
}

enum Role {
  USER
  ADMIN
}
